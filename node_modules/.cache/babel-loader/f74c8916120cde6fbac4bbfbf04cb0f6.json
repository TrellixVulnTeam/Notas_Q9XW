{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rodrigo\\\\Desktop\\\\projetos\\\\notasReact\\\\javascript_note\\\\src\\\\components\\\\notes\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useState, useEffect } from 'react';\nimport { Column, Button } from \"rbx\";\nimport \"../../styles/notes.scss\";\nimport { push as Menu } from 'react-burger-menu';\nimport List from \"../notes/list\";\nimport NoteService from '../../services/note';\nimport Search from '../notes/search';\nimport Editor from \"../notes/editor\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Notes(props) {\n  _s();\n\n  const [notes, setNotes] = useState([]);\n  const [current_note, setCurrentNote] = useState({\n    title: \"\",\n    body: \"\",\n    id: \"\"\n  });\n  useEffect(() => {\n    fetchNotes();\n  }, []);\n\n  async function fetchNotes() {\n    const response = await NoteService.index();\n\n    if (response.data.length >= 1) {\n      setNotes(response.data.reverse());\n      setCurrentNote(response.data[0]);\n    }\n  }\n\n  const createNote = async params => {\n    const note = await NoteService.create();\n    fetchNotes();\n  };\n\n  const deleteNote = async note => {\n    await NoteService.delete(note._id);\n    fetchNotes();\n  };\n\n  const updateNote = async (oldNote, params) => {\n    const updatedNote = await NoteService.update(oldNote._id, params);\n    const index = notes.indexOf(oldNote);\n    const newNotes = notes;\n    newNotes[index] = updatedNote.data;\n    setNotes(newNotes);\n    setCurrentNote(updatedNote.data);\n  };\n\n  const searchNotes = async query => {\n    const response = await NoteService.search(query);\n    setNotes(response.data);\n  };\n\n  const selectNote = id => {\n    const note = notes.find(note => {\n      return note._id == id;\n    });\n    setCurrentNote(note);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Column.Group, {\n      className: \"notes\",\n      id: \"notes\",\n      children: [/*#__PURE__*/_jsxDEV(Menu, {\n        pageWrapId: \"notes-editor\",\n        isOpen: props.isOpen,\n        onStateChange: state => props.setIsOpen(state.isOpen),\n        disableAutoFocus: true,\n        outerContainerId: \"notes\",\n        customBurgerIcon: false,\n        customCrossIcon: false,\n        children: [/*#__PURE__*/_jsxDEV(Column.Group, {\n          children: /*#__PURE__*/_jsxDEV(Column, {\n            size: 10,\n            offset: 1,\n            children: /*#__PURE__*/_jsxDEV(Search, {\n              searchNotes: searchNotes,\n              fetchNotes: fetchNotes\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(List, {\n          notes: notes,\n          selectNote: selectNote,\n          createNote: createNote,\n          deleteNote: deleteNote,\n          current_note: current_note\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Column, {\n        size: 12,\n        className: \"notes-editor\",\n        id: \"notes-editor\",\n        children: /*#__PURE__*/_jsxDEV(Editor, {\n          note: current_note,\n          updateNote: updateNote\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 20\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Notes, \"EGRBH0YG/KxrdYJu4/WeV9xm4Xo=\");\n\n_c = Notes;\nexport default Notes;\n\nvar _c;\n\n$RefreshReg$(_c, \"Notes\");","map":{"version":3,"sources":["C:/Users/Rodrigo/Desktop/projetos/notasReact/javascript_note/src/components/notes/index.js"],"names":["React","Fragment","useState","useEffect","Column","Button","push","Menu","List","NoteService","Search","Editor","Notes","props","notes","setNotes","current_note","setCurrentNote","title","body","id","fetchNotes","response","index","data","length","reverse","createNote","params","note","create","deleteNote","delete","_id","updateNote","oldNote","updatedNote","update","indexOf","newNotes","searchNotes","query","search","selectNote","find","isOpen","state","setIsOpen"],"mappings":"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","sourcesContent":["import React, { Fragment, useState, useEffect } from 'react';\r\nimport { Column, Button } from \"rbx\";\r\nimport \"../../styles/notes.scss\";\r\nimport { push as Menu } from 'react-burger-menu'\r\nimport List from \"../notes/list\";\r\nimport NoteService from '../../services/note';\r\nimport Search from '../notes/search';\r\nimport Editor from \"../notes/editor\";\r\n\r\nfunction Notes(props) {\r\n\r\n    const [notes, setNotes] = useState([]);\r\n    const [current_note, setCurrentNote] = useState({ title: \"\", body: \"\", id: \"\" });\r\n\r\n    useEffect(() => {\r\n        fetchNotes();\r\n    }, []);\r\n\r\n    async function fetchNotes() {\r\n        const response = await NoteService.index();\r\n        if (response.data.length >= 1) {\r\n            setNotes(response.data.reverse())\r\n            setCurrentNote(response.data[0])\r\n        }\r\n    }\r\n\r\n\r\n    const createNote = async (params) => {\r\n        const note = await NoteService.create();\r\n        fetchNotes();\r\n      }\r\n\r\n      const deleteNote = async (note) => {\r\n        await NoteService.delete(note._id);\r\n        fetchNotes();\r\n      }\r\n\r\n      const updateNote = async (oldNote, params) => {\r\n        const updatedNote = await NoteService.update(oldNote._id, params);\r\n        const index = notes.indexOf(oldNote);\r\n        const newNotes = notes;\r\n        newNotes[index] = updatedNote.data;\r\n        setNotes(newNotes);\r\n        setCurrentNote(updatedNote.data);\r\n      }\r\n\r\n      const searchNotes = async (query) => {\r\n        const response = await NoteService.search(query);\r\n        setNotes(response.data)\r\n      }\r\n\r\n      const selectNote = (id) => {\r\n        const note = notes.find((note) => {\r\n            return note._id == id;\r\n        })\r\n        setCurrentNote(note);\r\n    }\r\n\r\n\r\n    return (\r\n        <Fragment>\r\n            <Column.Group className=\"notes\" id=\"notes\">\r\n                <Menu\r\n                    pageWrapId={\"notes-editor\"}\r\n                    isOpen={props.isOpen}\r\n                    onStateChange={(state) => props.setIsOpen(state.isOpen)}\r\n                    disableAutoFocus\r\n                    outerContainerId={\"notes\"}\r\n                    customBurgerIcon={false}\r\n                    customCrossIcon={false}\r\n                >\r\n                    <Column.Group>\r\n                        <Column size={10} offset={1}>\r\n                            <Search searchNotes={searchNotes} fetchNotes={fetchNotes}/>\r\n                    </Column>\r\n                    </Column.Group>\r\n                    {/* <p>List...</p> */}\r\n                    <List\r\n                        notes={notes}\r\n                        selectNote={selectNote}\r\n                        createNote={createNote}\r\n                        deleteNote={deleteNote}\r\n                        current_note={current_note} />\r\n                </Menu>\r\n\r\n\r\n                <Column size={12} className=\"notes-editor\" id=\"notes-editor\">\r\n                   <Editor\r\n                    note={current_note}\r\n                    updateNote={updateNote}\r\n                   />\r\n                </Column>\r\n            </Column.Group>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default Notes;"]},"metadata":{},"sourceType":"module"}